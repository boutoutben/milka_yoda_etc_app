import AddUpdateAdoptSchema from "../../../validationSchema/AddUpdateAnimalSchema";
import testMatches from "./testMatches";

function nameTest (data, schema) {
    const nameValidValues = [
        "Bonjour",
        "Je suis √©tudiant",
        "√Ä bient√¥t !",
        "1234567890",
        "Voici une phrase avec des accents : √©√®√†√ß√¥√π",
        "Symbole ! ? . , : ; @ # * % / ( )",
        "Ligne 1\nLigne 2\r\nLigne 3",
        "phrase avec 'guillemets' et \"doubles guillemets\"",
        "Espaces    multiples",
    ];

    const nameInvalidValues = [
        { value: "Hello üòä", reason: "emoji" },
        { value: "C≈ìur ‚ù§Ô∏è", reason: "symbole unicode" },
        { value: "<script>", reason: "chevrons < >" },
        { value: "‚Ç¨100", reason: "symbole euro" },
        { value: "Mot‚Äîmot", reason: "tiret long ‚Äî" },
        { value: "z‰∏≠Êñá", reason: "caract√®res chinois" },
        { value: "—Ä—É—Å—Å–∫–∏–π", reason: "alphabet cyrillique" },
        { value: "ŸÖÿ±ÿ≠ÿ®ÿß", reason: "alphabet arabe" },
        { value: "¬© Copyright", reason: "symbole ¬©" },
    ];
    test("should fail when name is empty", () => {
        data.name = "";
        expect(schema.validate(data)).rejects.toThrow("Le nom de l'animal est requis.")
    });
    test("should fail when name is too short", () => {
        data.name = "uu";
        expect(schema.validate(data)).rejects.toThrow("Le nom doit comporter au moins 3 caract√®res.")
    })
    test("should success when name's lenght is equal to 3", () => {
        data.name = "uue";
        expect(schema.validate(data)).resolves.toEqual(data)
    });
    test("should success when name's lenght is equal to 50", () => {
        data.name = "4D4LW5tho9caf3rBPGEFJRx3kAteAKKN28ureDJudCucDppYOm";
        expect(schema.validate(data)).resolves.toEqual(data)
    })
    test("should fail when name is too long", () => {
        data.name = "4D4LW5tho9caf3rBPGEFJRx3kAteAKKN28ureDJudCucDppYOmkk";
        expect(schema.validate(data)).rejects.toThrow("Le nombre maximal de caract√®res du nom est 50.")
    })
    testMatches('name', nameValidValues, nameInvalidValues,AddUpdateAdoptSchema(), data, "Format invalide")
}

export default nameTest;