import './../css/contact.css';
import { Formik, Form, Field } from 'formik';
import * as Yup from 'yup';
import { MainBtn } from './Component';
import { useRef } from 'react';
import emailjs from '@emailjs/browser';

const ContactSchema = Yup.object().shape({
    lastname: Yup.string()
       .min(3, "Le nom doit comporter au moins 3 caract√®res.")
       .max(50, "Le nombre maximal de caract√®res du nom est 50.")
       .matches(/^[A-Z√Ä-≈∏][a-z√†-√ø'-]+(?: [A-Z√Ä-≈∏][a-z√†-√ø'-]+)*$/, "Format invalide : ex. Dupont ou Legrand-Duval")
       .required("Le nom est requis."),
    
    firstname: Yup.string()
       .min(2, "Il faut au moins 2 caract√®res.")
       .max(50, "Le nombre maximal de caract√®res est 50.")
       .matches(/^[A-Z√Ä-≈∏][a-z√†-√ø'-]+(?: [A-Z√Ä-≈∏][a-z√†-√ø'-]+)*$/, "Format invalide : ex. Jean ou Marie-Th√©r√®se")
       .required("Le pr√©nom est requis."),

    email: Yup.string()
       .email("Adresse e-mail invalide")
       .required("L'e-mail est requis."),
    
    phone: Yup.string() 
       .matches(/^(\+33|0)[1-9](\s?\d{2}){4}$/, "Num√©ro de t√©l√©phone invalide"),

    subject: Yup.string() 
       .min(5, "Le sujet doit contenir au moins 5 caract√®res.")
       .max(100, "Le sujet ne doit pas d√©passer 100 caract√®res.")
       .matches(/^[A-Za-z√Ä-√ñ√ò-√∂√∏-√ø0-9.,!?'"()\- ]+$/, "Le sujet contient des caract√®res non autoris√©s.")
       .required("Le sujet est requis."),

    message: Yup.string()
       .min(10, "Le message doit contenir au moins 10 caract√®res.")
       .max(1000, "Le message ne doit pas d√©passer 1000 caract√®res.")
       .matches(/^[A-Za-z√Ä-√ñ√ò-√∂√∏-√ø0-9.,!?'"()\-:;@#*\/\n\r ]+$/, "Le message contient des caract√®res non autoris√©s.")
       .required("Le message est requis."),
});

const ContactForm = () => {
    const formRef = useRef(); // ‚úÖ Still needed for emailjs
    const initialValues = {
        lastname: "",
        firstname: "",
        email: "",
        phone: "",
        subject: "",
        message: "",
    };
    
    const handleSubmit = (values, { resetForm }) => {
        console.log("‚úî Formik onSubmit is triggered!");
        console.log("üì© Form Values:", values);
        
        if (!formRef.current) return;

        emailjs.sendForm(
            "service_rudbrtp",
            "template_n97r70c",
            formRef.current,
            "mHP87VvYc_0rTgwUu"
        )
        .then((result) => {
            console.log("‚úÖ Email sent:", result.text);
            resetForm(); // ‚úÖ Reset Formik form state
        })
        .catch((err) => {
            console.error("‚ùå Error:", err.text);
            alert("√âchec de l'envoi du message.");
        });
    };



    return (
        <section id="contactForm">
            <h1>Nous contacter par mail</h1>
            <Formik
                initialValues={initialValues}
                validationSchema={ContactSchema}
                onSubmit={handleSubmit}
            >
                {({ errors, touched }) => (
                    <Form ref={formRef}> {/* ‚úÖ Form ref is fine here */}
                        <div>
                            <div>
                                <Field type="text" name="lastname" placeholder="Nom*" />  
                                {errors.lastname && touched.lastname && (
                                    <div className="formError">{errors.lastname}</div>
                                )}  
                            </div>
                            <div>
                                <Field type="text" name="firstname" placeholder="Pr√©nom" />  
                                {errors.firstname && touched.firstname && (
                                    <div className="formError">{errors.firstname}</div>
                                )}  
                            </div>
                            
                        </div>

                        <div>
                            <div>
                                <Field type="text" name="email" placeholder="Email*" />
                                {errors.email && touched.email && (
                                    <div className="formError">{errors.email}</div>
                                )}
                            </div>
                            <div>
                                <Field type="text" name="phone" placeholder="T√©l√©phone" /> 
                                {errors.phone && touched.phone && (
                                    <div className="formError">{errors.phone}</div>
                                )}   
                            </div>
                        </div>              
                        <Field type="text" name="subject" placeholder="Sujet*" />
                        {errors.subject && touched.subject && (
                            <div className="formError">{errors.subject}</div>
                        )}

                        <Field as="textarea" name="message" placeholder="Message*" />
                        {errors.message && touched.message && (
                            <div className="formError">{errors.message}</div>
                        )}

                        {/* ‚úÖ No need for click={handleSubmit}, Formik handles it */}
                        <MainBtn className="btnInMain" name="Envoyer" isSubmit={true} />
                    </Form>
                )}
            </Formik>
        </section>
    );
};

const ContactText = () => {
    return (
        <section className='contactText'>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
        </section>
    )
}

const Contact = () => {
    return (
        <main id="contact">
            <img src="img/contactImg.png" alt="" />
            <ContactForm />
            <ContactText />
        </main>
        
    )
}

export default Contact;